From 6e78c139eadeae35eb2ad64f0de0afefc28b9c92 Mon Sep 17 00:00:00 2001
From: netlars <netlars@gmx.de>
Date: Sun, 8 Jun 2014 14:49:11 +0200
Subject: [PATCH 1/1] fix mount by name MTD partitions

Change-Id: I97f9f44e040cfca97c798ea26075187c70934edc
---
 init/devices.c | 44 +++++++++++++++++++++++++++++++++++++++++---
 init/util.c    | 21 +++++++++++++++++++++
 init/util.h    |  1 +
 3 files changed, 63 insertions(+), 3 deletions(-)

diff --git a/init/devices.c b/init/devices.c
index 4badd20..fa36e7f 100644
--- a/init/devices.c
+++ b/init/devices.c
@@ -475,10 +475,10 @@ static char **parse_platform_block_device(struct uevent *uevent)
         return NULL;
     device = pdev->name;
 
-    char **links = malloc(sizeof(char *) * 4);
+    char **links = malloc(sizeof(char *) * 5);
     if (!links)
         return NULL;
-    memset(links, 0, sizeof(char *) * 4);
+    memset(links, 0, sizeof(char *) * 5);
 
     INFO("found platform device %s\n", device);
 
@@ -493,6 +493,12 @@ static char **parse_platform_block_device(struct uevent *uevent)
             link_num++;
         else
             links[link_num] = NULL;
+
+		if (asprintf(&links[link_num], "/dev/block/mtd/by-name/%s", p) > 0)
+			link_num++;
+		else
+			links[link_num] = NULL;
+
         free(p);
     }
 
@@ -512,6 +518,36 @@ static char **parse_platform_block_device(struct uevent *uevent)
     return links;
 }
 
+static char **parse_mtd_block_device(struct uevent *uevent)
+{
+    int partition_num;
+    const char *partition_name;
+    char *p;
+
+    char **links = malloc(sizeof(char *) * 2);
+    if (!links)
+        return NULL;
+    memset(links, 0, sizeof(char *) * 2);
+
+    partition_num = atoi(strstr(uevent->path, "/mtdblock") + 9);
+    partition_name = mtd_number_to_name(partition_num);
+    if (!partition_name)
+        goto err;
+
+    p = strdup(partition_name);
+    if (!p)
+        goto err;
+    sanitize(p);
+    asprintf(&links[0], "/dev/block/mtd/by-name/%s", p);
+    free(p);
+
+    return links;
+
+err:
+    free(links);
+    return NULL;
+}
+
 static void handle_device(const char *action, const char *devpath,
         const char *path, int block, int major, int minor, char **links)
 {
@@ -585,8 +621,10 @@ static void handle_block_device_event(struct uevent *uevent)
     snprintf(devpath, sizeof(devpath), "%s%s", base, name);
     make_dir(base, 0755);
 
-    if (!strncmp(uevent->path, "/devices/", 9))
+    if (!strncmp(uevent->path, "/devices/platform/", 18))
         links = parse_platform_block_device(uevent);
+    else if (strstr(uevent->path, "/mtdblock"))
+        links = parse_mtd_block_device(uevent);
 
     handle_device(uevent->action, devpath, uevent->path, 1,
             uevent->major, uevent->minor, links);
diff --git a/init/util.c b/init/util.c
index 266e3bd..f3639fc 100644
--- a/init/util.c
+++ b/init/util.c
@@ -261,6 +261,27 @@ int mtd_name_to_number(const char *name)
     return -1;
 }
 
+const char *mtd_number_to_name(int number)
+{
+    int n;
+    if (mtd_part_count < 0) {
+        mtd_part_count = 0;
+        find_mtd_partitions();
+    }
+    for (n = 0; n < mtd_part_count; n++) {
+        if (number == mtd_part_map[n].number) {
+            return mtd_part_map[n].name;
+        }
+    }
+    mtd_part_count = 0;
+    find_mtd_partitions();
+    for (n = 0; n < mtd_part_count; n++) {
+        if (number == mtd_part_map[n].number) {
+            return mtd_part_map[n].name;
+        }
+    }
+    return NULL;
+}
 /*
  * gettime() - returns the time in seconds of the system's monotonic clock or
  * zero on error.
diff --git a/init/util.h b/init/util.h
index 04b8129..8c35c27 100644
--- a/init/util.h
+++ b/init/util.h
@@ -25,6 +25,7 @@
 static const char *coldboot_done = "/dev/.coldboot_done";
 
 int mtd_name_to_number(const char *name);
+const char *mtd_number_to_name(int number);
 int create_socket(const char *name, int type, mode_t perm,
                   uid_t uid, gid_t gid, const char *socketcon);
 void *read_file(const char *fn, unsigned *_sz);
-- 
1.9.1


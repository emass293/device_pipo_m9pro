From 62f23ffbf9b0468a9ad99d3946821e93a9633559 Mon Sep 17 00:00:00 2001
From: netlars <netlars@gmx.de>
Date: Sat, 26 Jul 2014 08:59:15 +0200
Subject: [PATCH] changes bootanimation

Change-Id: Ia3393b5e6a2e78b2ed9bb049efc547db1e049ecd
---
 cmds/bootanimation/BootAnimation.cpp      | 244 +++++++++++++++++++++++++++---
 cmds/bootanimation/BootAnimation.h        |  22 ++-
 cmds/bootanimation/bootanimation_main.cpp |  10 +-
 3 files changed, 251 insertions(+), 25 deletions(-)

diff --git a/cmds/bootanimation/BootAnimation.cpp b/cmds/bootanimation/BootAnimation.cpp
index f247eb9..2e28e1c 100644
--- a/cmds/bootanimation/BootAnimation.cpp
+++ b/cmds/bootanimation/BootAnimation.cpp
@@ -57,7 +57,10 @@
 #define SYSTEM_BOOTANIMATION_FILE "/system/media/bootanimation.zip"
 #define SYSTEM_ENCRYPTED_BOOTANIMATION_FILE "/system/media/bootanimation-encrypted.zip"
 #define EXIT_PROP_NAME "service.bootanim.exit"
+#define FIXED_ONE 1
 
+#define USER_SHUTDOWN_BOOTANIMATION_FILE "/data/local/shutdownanimation.zip"
+#define SYSTEM_SHUTDOWN_BOOTANIMATION_FILE "/system/media/shutdownanimation.zip"
 extern "C" int clock_nanosleep(clockid_t clock_id, int flags,
                            const struct timespec *request,
                            struct timespec *remain);
@@ -66,14 +69,44 @@ namespace android {
 
 // ---------------------------------------------------------------------------
 
-BootAnimation::BootAnimation() : Thread(false)
+BootAnimation::BootAnimation(bool shutdown) : Thread(false)
 {
     mSession = new SurfaceComposerClient();
+    mHardwareRotation = 0;
+    mReverseAxis = false;
+    mShutdown = shutdown;
+    char property[PROPERTY_VALUE_MAX];
+    if (property_get("ro.sf.hwrotation", property, "0") > 0) {
+        mHardwareRotation = atoi(property);
+    }
+
+    if (property_get("ro.sf.fakerotation", property, "false") > 0) {
+        mReverseAxis = !strcmp(property, "true");
+    }
+
+    sp<IBinder> dtoken(SurfaceComposerClient::getBuiltInDisplay(
+            ISurfaceComposer::eDisplayIdMain));
+    DisplayInfo dinfo;
+    status_t status = SurfaceComposerClient::getDisplayInfo(dtoken, &dinfo);
+    ALOGD("DISPLAY,W-H: %d-%d, ori: %d", dinfo.w, dinfo.h,dinfo.orientation);
+    if (mShutdown) {
+	    bool vertical=dinfo.orientation==0 || dinfo.orientation==2 ;
+	    if(vertical){
+		    mReverseAxis =false;
+	    }else{
+		    mReverseAxis=true;
+	    }
+    }
 }
 
 BootAnimation::~BootAnimation() {
 }
 
+void BootAnimation::isShutdown(bool shutdown) {
+     mShutdown = shutdown;
+}
+
+
 void BootAnimation::onFirstRef() {
     status_t err = mSession->linkToComposerDeath(this);
     ALOGE_IF(err, "linkToComposerDeath failed (%s) ", strerror(-err));
@@ -186,6 +219,11 @@ status_t BootAnimation::initTexture(void* buffer, size_t len)
     if (tw < w) tw <<= 1;
     if (th < h) th <<= 1;
 
+    mBMPWidth = w;
+    mBMPHeight = h;
+    mTexWidth = tw;
+    mTexHeight = th;
+
     switch (bitmap.getConfig()) {
         case SkBitmap::kARGB_8888_Config:
             if (tw != w || th != h) {
@@ -238,12 +276,22 @@ status_t BootAnimation::readyToRun() {
         dinfo.w = temp;
     }
 
+    int curWidth = dinfo.w;
+    int curHeight = dinfo.h;
+
+    if (mShutdown) {
+	    if (dinfo.orientation % 2 == 0) {
+		    curWidth = dinfo.h;
+		    curHeight = dinfo.w;
+	    }
+    }
+
     Rect destRect(dinfo.w, dinfo.h);
     mSession->setDisplayProjection(dtoken, orient, destRect, destRect);
 
     // create the native surface
     sp<SurfaceControl> control = session()->createSurface(String8("BootAnimation"),
-            dinfo.w, dinfo.h, PIXEL_FORMAT_RGB_565);
+            curWidth, curHeight, PIXEL_FORMAT_RGB_565);
 
     SurfaceComposerClient::openGlobalTransaction();
     control->setLayer(0x40000000);
@@ -309,6 +357,26 @@ status_t BootAnimation::readyToRun() {
         mAndroidAnimation = false;
     }
 
+    if (!mShutdown) {
+           status_t err = mZip.open("/data/local/bootanimation.zip");
+           if (err != NO_ERROR) {
+
+                err = mZip.open("/system/media/bootanimation.zip");
+                if (err != NO_ERROR) {
+                    mAndroidAnimation = true;
+                }
+           }
+       } else {
+           status_t err = mZip.open("/data/local/shutdownanimation.zip");
+           if (err != NO_ERROR) {
+                err = mZip.open("/system/media/shutdownanimation.zip");
+                if (err != NO_ERROR) {
+                    mAndroidAnimation = true;
+                }
+           }
+       }
+
+
 
 #ifdef PRELOAD_BOOTANIMATION
     // Preload the bootanimation zip on memory, so we don't stutter
@@ -368,53 +436,145 @@ bool BootAnimation::threadLoop()
     return r;
 }
 
+void BootAnimation::getTexCoordinate() {
+
+    GLfloat w_scale = float(mBMPWidth)/mTexWidth;
+    GLfloat h_scale = float(mBMPHeight)/mTexHeight;
+
+	if (mReverseAxis) {
+		mTexCoords[0]=0;                 mTexCoords[1]=FIXED_ONE*h_scale;
+		mTexCoords[2]=0;                 mTexCoords[3]=0;
+		mTexCoords[4]=FIXED_ONE*w_scale; mTexCoords[5]=0;
+		mTexCoords[6]=FIXED_ONE*w_scale; mTexCoords[7]=FIXED_ONE*h_scale;
+	} else {
+		mTexCoords[0]=0;                 mTexCoords[1]=0;
+		mTexCoords[2]=FIXED_ONE*w_scale; mTexCoords[3]=0;
+		mTexCoords[4]=FIXED_ONE*w_scale; mTexCoords[5]=FIXED_ONE*h_scale;
+		mTexCoords[6]=0;                 mTexCoords[7]=FIXED_ONE*h_scale;
+	}
+}
+
 bool BootAnimation::android()
 {
     initTexture(&mAndroid[0], mAssets, "images/android-logo-mask.png");
     initTexture(&mAndroid[1], mAssets, "images/android-logo-shine.png");
+    mBMPWidth = mTexWidth = mBMPHeight = mTexHeight = 1;
+    getTexCoordinate();
 
     // clear screen
     glShadeModel(GL_FLAT);
     glDisable(GL_DITHER);
+    glViewport(0, 0, mWidth, mHeight);
+    glMatrixMode(GL_PROJECTION);
+    glLoadIdentity();
+    float ratio = mWidth / mHeight;
+    glFrustumf(-ratio, ratio, -1, 1, 0, 1);
+    glMatrixMode(GL_MODELVIEW);
+    glLoadIdentity();
+    glOrthof(0, mWidth, mHeight, 0, 0, 1);
+
+    glEnable(GL_TEXTURE_2D);
+    glEnableClientState(GL_VERTEX_ARRAY);
+    glEnableClientState(GL_TEXTURE_COORD_ARRAY);
     glDisable(GL_SCISSOR_TEST);
     glClearColor(0,0,0,1);
     glClear(GL_COLOR_BUFFER_BIT);
     eglSwapBuffers(mDisplay, mSurface);
 
-    glEnable(GL_TEXTURE_2D);
+    // Blend state
+    glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
     glTexEnvx(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_REPLACE);
 
-    const GLint xc = (mWidth  - mAndroid[0].w) / 2;
-    const GLint yc = (mHeight - mAndroid[0].h) / 2;
-    const Rect updateRect(xc, yc, xc + mAndroid[0].w, yc + mAndroid[0].h);
+    if (mReverseAxis) {
+        exchangeParameters(&mWidth, &mHeight);
+    }
 
-    glScissor(updateRect.left, mHeight - updateRect.bottom, updateRect.width(),
-            updateRect.height());
+    GLfloat xc = float(mWidth  - mAndroid[0].w) / 2;
+    GLfloat yc = float(mHeight - mAndroid[0].h) / 2;
 
-    // Blend state
-    glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
-    glTexEnvx(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_REPLACE);
+    if (mReverseAxis) {
+        exchangeParameters(&xc, &yc);
+        exchangeParameters(&mAndroid[0].w, &mAndroid[0].h);
+        exchangeParameters(&mAndroid[1].w, &mAndroid[1].h);
+    }
+
+	const GLfloat mask_vertices[] = {
+			xc, yc, 0,
+			xc+mAndroid[0].w, yc, 0,
+			xc+mAndroid[0].w, yc+mAndroid[0].h, 0,
+			xc, yc+mAndroid[0].h, 0
+	};
+
+	const GLfloat shine_vertices[] = {
+			xc, yc, 0,
+			xc+mAndroid[1].w, yc, 0,
+			xc+mAndroid[1].w, yc+mAndroid[1].h, 0,
+			xc, yc+mAndroid[1].h, 0
+	};
+
+	const GLushort indices[] = { 0, 1, 2,  0, 2, 3 };
+	int nelem = sizeof(indices)/sizeof(indices[0]);
+
+    const Rect updateRect(xc, yc, xc + mAndroid[0].w, yc + mAndroid[0].h);
+    glScissor(updateRect.left, updateRect.top, updateRect.width(),
+            updateRect.height());
 
     const nsecs_t startTime = systemTime();
     do {
         nsecs_t now = systemTime();
         double time = now - startTime;
-        float t = 4.0f * float(time / us2ns(16667)) / mAndroid[1].w;
-        GLint offset = (1 - (t - floorf(t))) * mAndroid[1].w;
-        GLint x = xc - offset;
+        float t = 0;
+        GLint x, y, offset;
+
+        if (mReverseAxis) {
+            t = 4.0f * float(time / us2ns(16667)) / mAndroid[1].h;
+            offset = (1 - (t - floorf(t))) * mAndroid[1].h;
+            y = yc - offset;
+        } else {
+            t = 4.0f * float(time / us2ns(16667)) / mAndroid[1].w;
+            offset = (1 - (t - floorf(t))) * mAndroid[1].w;
+            x = xc - offset;
+        }
+
+        glMatrixMode(GL_TEXTURE);
+        glLoadIdentity();
+        glMatrixMode(GL_MODELVIEW);
+
 
         glDisable(GL_SCISSOR_TEST);
         glClear(GL_COLOR_BUFFER_BIT);
 
         glEnable(GL_SCISSOR_TEST);
+
+        if (mReverseAxis) {
+            glTranslatef(0, -offset, 0);
+        } else {
+            glTranslatef(-offset, 0, 0);
+        }
         glDisable(GL_BLEND);
         glBindTexture(GL_TEXTURE_2D, mAndroid[1].name);
-        glDrawTexiOES(x,                 yc, 0, mAndroid[1].w, mAndroid[1].h);
-        glDrawTexiOES(x + mAndroid[1].w, yc, 0, mAndroid[1].w, mAndroid[1].h);
+        glVertexPointer(3, GL_FLOAT, 0, shine_vertices);
+        glTexCoordPointer(2, GL_FLOAT, 0, mTexCoords);
+        glDrawElements(GL_TRIANGLES, nelem, GL_UNSIGNED_SHORT, indices);
+
+        if (mReverseAxis) {
+            glTranslatef(0, mAndroid[1].h, 0);
+        } else {
+            glTranslatef(mAndroid[1].w, 0, 0);
+        }
+        glDrawElements(GL_TRIANGLES, nelem, GL_UNSIGNED_SHORT, indices);
+
+        if (mReverseAxis) {
+            glTranslatef(0, offset - mAndroid[1].h, 0);
+        } else {
+            glTranslatef(offset - mAndroid[1].w, 0, 0);
+        }
 
         glEnable(GL_BLEND);
         glBindTexture(GL_TEXTURE_2D, mAndroid[0].name);
-        glDrawTexiOES(xc, yc, 0, mAndroid[0].w, mAndroid[0].h);
+        glVertexPointer(3, GL_FLOAT, 0, mask_vertices);
+        glTexCoordPointer(2, GL_FLOAT, 0, mTexCoords);
+        glDrawElements(GL_TRIANGLES, nelem, GL_UNSIGNED_SHORT, indices);
 
         EGLBoolean res = eglSwapBuffers(mDisplay, mSurface);
         if (res == EGL_FALSE)
@@ -436,6 +596,11 @@ bool BootAnimation::android()
 
 void BootAnimation::checkExit() {
     // Allow surface flinger to gracefully request shutdown
+    if(mShutdown)//shutdown animation
+        {
+        return;
+        }
+
     char value[PROPERTY_VALUE_MAX];
     property_get(EXIT_PROP_NAME, value, "0");
     int exitnow = atoi(value);
@@ -473,8 +638,13 @@ bool BootAnimation::movie()
         char pathType;
         if (sscanf(l, "%d %d %d", &width, &height, &fps) == 3) {
             //LOGD("> w=%d, h=%d, fps=%d", width, height, fps);
-            animation.width = width;
-            animation.height = height;
+            if (mReverseAxis) {
+                animation.width = height;
+                animation.height = width;
+            } else {
+                animation.width = width;
+                animation.height = height;
+            }
             animation.fps = fps;
         }
         else if (sscanf(l, " %c %d %d %s", &pathType, &count, &pause, path) == 4) {
@@ -521,11 +691,29 @@ bool BootAnimation::movie()
             }
         }
     }
+    //TODO
+    if (mShutdown) {
+	    if (mReverseAxis) {
+//		    exchangeParameters(&mWidth, &mHeight);
+	    }
+    }
 
 #ifndef CONTINUOUS_SPLASH
     // clear screen
     glShadeModel(GL_FLAT);
     glDisable(GL_DITHER);
+    glViewport(0, 0, mWidth, mHeight);
+    glMatrixMode(GL_PROJECTION);
+    glLoadIdentity();
+    float ratio = mWidth / mHeight;
+    glFrustumf(-ratio, ratio, -1, 1, 0, 1);
+    glMatrixMode(GL_MODELVIEW);
+    glLoadIdentity();
+    glOrthof(0, mWidth, mHeight, 0, 0, 1);
+
+    glEnable(GL_TEXTURE_2D);
+    glEnableClientState(GL_VERTEX_ARRAY);
+    glEnableClientState(GL_TEXTURE_COORD_ARRAY);
     glDisable(GL_SCISSOR_TEST);
     glDisable(GL_BLEND);
     glClearColor(0,0,0,1);
@@ -550,6 +738,16 @@ bool BootAnimation::movie()
     Region clearReg(Rect(mWidth, mHeight));
     clearReg.subtractSelf(Rect(xc, yc, xc+animation.width, yc+animation.height));
 
+    const GLfloat vertices[] = {
+            xc, yc, 0,
+            xc+animation.width, yc, 0,
+            xc+animation.width, yc+animation.height, 0,
+            xc, yc+animation.height, 0
+    };
+
+    const GLushort indices[] = { 0, 1, 2,  0, 2, 3 };
+    int nelem = sizeof(indices)/sizeof(indices[0]);
+
     for (int i=0 ; i<pcount ; i++) {
         const Animation::Part& part(animation.parts[i]);
         const size_t fcount = part.frames.size();
@@ -585,6 +783,8 @@ bool BootAnimation::movie()
                     initTexture(
                             frame.map->getDataPtr(),
                             frame.map->getDataLength());
+
+                    getTexCoordinate();
                 }
 
                 if (!clearReg.isEmpty()) {
@@ -599,7 +799,11 @@ bool BootAnimation::movie()
                     }
                     glDisable(GL_SCISSOR_TEST);
                 }
-                glDrawTexiOES(xc, yc, 0, animation.width, animation.height);
+
+                glVertexPointer(3, GL_FLOAT, 0, vertices);
+                glTexCoordPointer(2, GL_FLOAT, 0, mTexCoords);
+                glDrawElements(GL_TRIANGLES, nelem, GL_UNSIGNED_SHORT, indices);
+
                 eglSwapBuffers(mDisplay, mSurface);
 
                 nsecs_t now = systemTime();
diff --git a/cmds/bootanimation/BootAnimation.h b/cmds/bootanimation/BootAnimation.h
index 6695fa6..9a8189c 100644
--- a/cmds/bootanimation/BootAnimation.h
+++ b/cmds/bootanimation/BootAnimation.h
@@ -45,11 +45,12 @@ public:
         eOrientation180         = 2,
         eOrientation270         = 3,
     };
-                BootAnimation();
+                BootAnimation(bool shutdown);
     virtual     ~BootAnimation();
 
     sp<SurfaceComposerClient> session() const;
-
+    bool        mShutdown;
+    void        isShutdown(bool shutdown);
 private:
     virtual bool        threadLoop();
     virtual status_t    readyToRun();
@@ -88,7 +89,7 @@ private:
     status_t initTexture(void* buffer, size_t len);
     bool android();
     bool movie();
-
+    void getTexCoordinate();
     void checkExit();
 
     sp<SurfaceComposerClient>       mSession;
@@ -103,6 +104,21 @@ private:
     sp<Surface> mFlingerSurface;
     bool        mAndroidAnimation;
     ZipFileRO   mZip;
+    int         mHardwareRotation;
+    GLfloat     mTexCoords[8];
+    bool        mReverseAxis;
+    int         mTexWidth;
+    int         mTexHeight;
+    int         mBMPWidth;
+    int         mBMPHeight;
+
+    template<class T>
+    void exchangeParameters(T* x, T* y) {
+        T temp;
+        temp = *x;
+        *x = *y;
+        *y = temp;
+    }
 };
 
 // ---------------------------------------------------------------------------
diff --git a/cmds/bootanimation/bootanimation_main.cpp b/cmds/bootanimation/bootanimation_main.cpp
index 417e138..eb9a598 100644
--- a/cmds/bootanimation/bootanimation_main.cpp
+++ b/cmds/bootanimation/bootanimation_main.cpp
@@ -52,8 +52,14 @@ int main(int argc, char** argv)
         ProcessState::self()->startThreadPool();
 
         // create the boot animation object
-        sp<BootAnimation> boot = new BootAnimation();
-
+	sp<BootAnimation> boot ;
+        if (argc > 1) {
+            if (strcmp(argv[1], "-shutdown") == 0) {
+		     boot = new BootAnimation(true);
+            }
+        }else {
+		boot = new BootAnimation(false);
+	}
         IPCThreadState::self()->joinThreadPool();
 
     }
-- 
1.9.1

